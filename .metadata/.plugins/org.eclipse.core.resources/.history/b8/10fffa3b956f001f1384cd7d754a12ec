package com.example.demo.filter;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import jakarta.ws.rs.core.HttpHeaders;

@Component
public class AuthenticationFilter extends AbstractGatewayFilterFactory<AuthenticationFilter.Config> {

	@Autowired
	private RouteValidator validator;

	@Autowired
	private RestTemplate template;

	public AuthenticationFilter() {
		super(Config.class);
	}

	@Override
	public GatewayFilter apply(Config config) {
		System.out.println("Gateway Filter is working");
		return ((exchange, chain) -> {
			if (validator.isSecured.test(exchange.getRequest())) {
				// If header doesn't contain Bearer Token then throw exception
				if (!exchange.getRequest().getHeaders().containsKey(HttpHeaders.AUTHORIZATION)) {
					throw new RuntimeException("missing authorization header");
				}

				List<String> authHeaders = exchange.getRequest().getHeaders().get(HttpHeaders.AUTHORIZATION);
				String authHeader = authHeaders.size() == 0 ? null : authHeaders.get(0);
				if(authHeader != null && authHeader.startsWith("Bearer ")) {
					authHeader = authHeader.substring(7);
				}
				
				try {
					template.getForObject("http://localhost:8080/auth/validate?token=" + authHeader , String.class);
				}catch(Exception e) {
					throw new RuntimeException("unauthorized access to application");
				}
			}
			return chain.filter(exchange);
		});
	}

	public static class Config {

	}
}
