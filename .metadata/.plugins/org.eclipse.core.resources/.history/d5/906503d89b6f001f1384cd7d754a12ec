package com.example.demo.filter;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import jakarta.ws.rs.core.HttpHeaders;

@Component
public class AuthenticationFilter extends AbstractGatewayFilterFactory<AuthenticationFilter.Config> {

	@Autowired
	private RouteValidator validator;

	@Autowired
	private RestTemplate template;

	public AuthenticationFilter() {
		super(Config.class);
	}

	@Override
	public GatewayFilter apply(Config config) {
		System.out.println("Gateway Filter is working");
		return ((exchange, chain) -> {
			if (validator.isSecured.test(exchange.getRequest())) {
	            // Get the token from the request header
	            String token = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);

	            if (token == null || !token.startsWith("Bearer ")) {
	                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
	                return exchange.getResponse().setComplete();
	            }

  	            // Extract the token part after "Bearer "
	            String actualToken = token.substring(7);
	      
				try {
					String url = "http://localhost:9898/auth/validate?token=" + actualToken;
	                ResponseEntity<String> response = template.getForEntity(url, String.class);
	                System.out.println(response.getStatusCode());
				} catch (Exception e) {
	                // Handle errors (e.g., identity-service is down or token invalid)
	                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
	                return exchange.getResponse().setComplete();
				}
			}
			return chain.filter(exchange);
		});
	}

	public static class Config {

	}
}
